version: '3.9'

#networks:
#  back-tier:

volumes:
  prometheus_data: { }
  grafana_data: { }

services:

  ################## Onlinemed services  ##################

  onlinemed-service:
    container_name: onlinemed-service-docker
    image: 'onlinemed-service-docker:latest'
    build:
      context: ./onlinemed-backend
      dockerfile: ./Dockerfile
    depends_on:
      - onlinemed-postgresDB
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://onlinemed-postgresDB:5432/onlinemed_db
      - SPRING_DATASOURCE_USERNAME=onlinemed_root
      - SPRING_DATASOURCE_PASSWORD=e976908e-fab7-11ea-9418-5f9b5705bac5
      - SPRING_JPA_HIBERNATE_DDL_AUTO=create-drop
      - SPRING_PROFILES_ACTIVE=dev
    ports:
      - "8080:8080"
    restart: always
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
        delay: 2s
        max_attempts: 5
        window: 20s

  onlinemed-mail-sender:
    container_name: onlinemed-mail-sender-docker
    image: 'onlinemed-mail-sender-docker:latest'
    build:
      context: ./onlinemed-mail-sender
      dockerfile: ./Dockerfile
    environment:
     - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - kafka
      - onlinemed-postgresDB
    ports:
      - "8082:8082"
    restart: always
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
        delay: 2s
        max_attempts: 5
        window: 20s

  onlinemed-postgresDB:
    image: 'postgres:latest'
    container_name: onlinemed-postgresDB
    environment:
      - POSTGRES_USER=onlinemed_root
      - POSTGRES_PASSWORD=e976908e-fab7-11ea-9418-5f9b5705bac5
      - POSTGRES_DB=onlinemed_db
      - POSTGRES_HOST_AUTH_METHOD=trust
    ports:
      - "5555:5432"  # [outside:inside] protect locally installed postgres port

  onlinemed-ui-service:
    container_name: onlinemed-ui-docker
    image: 'onlinemed-ui-docker:latest'
    build:
      context: ./onlinemed-ui
      dockerfile: ./Dockerfile
    depends_on:
      - onlinemed-service
    ports:
      - "4300:80"
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
        delay: 2s
        max_attempts: 5
        window: 20s

  ################## Kafka  ##################

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zookeeper:2888:3888

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 20s
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
#    volumes:
#      - ./docker-volumes/kafka/:/usr/kafka-setup
#    entrypoint: [ "/bin/bash", "/usr/kafka-setup/initial-setup.sh"]
    depends_on:
      - zookeeper

  schema-registry:
    image: confluentinc/cp-schema-registry:7.3.0
    hostname: schema-registry
    container_name: schema-registry
    ports:
      - "9081:9081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:19092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:9081
    depends_on:
      - zookeeper
      - kafka

  kafka-monitor-postgresql:
    image: postgres:14
    hostname: kafka-monitor-postgresql
    container_name: kafka-monitor-postgresql
    environment:
      POSTGRES_DB: "kafka-monitor"
      POSTGRES_USER: "onlinemed_root"
      POSTGRES_PASSWORD: "3a676f28-d564-4932-8ca7-8ca3507b0088"
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256"
    ports:
      - "5444:5444"

  kafka-ui-console:
    image: conduktor/conduktor-platform:1.18.1
    hostname: kafka-ui-console
    container_name: kafka-ui-console
    depends_on:
      - kafka-monitor-postgresql
    ports:
      - "9080:8080"
    expose:
      - 9080
    volumes:
      - type: bind
        source: ./docker-volumes/kafka-monitoring/platform-config.yaml
        target: /opt/conduktor/platform-config.yaml
        read_only: true
    environment:
      CDK_IN_CONF_FILE: /opt/conduktor/platform-config.yaml

  conduktor-monitoring:
    hostname: conduktor-monitoring
    container_name: conduktor-monitoring
    image: conduktor/conduktor-platform-cortex:1.18.1
    environment:
      CDK_CONSOLE-URL: "http://kafka-ui-console:9080"


  ################## Tracing  ##################

  prometheus:
    image: prom/prometheus:v2.45.2
    container_name: prometheus
    volumes:
      - ./docker-volumes/prometheus:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    links:
      - onlinemed-service:onlinemed-service
    depends_on:
      - onlinemed-service
    restart: always

  grafana:
    image: grafana/grafana
    container_name: grafana
    user: "0"
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker-volumes/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./docker-volumes/grafana/provisioning/dashboards:/etc/grafana/dashboards
    env_file:
      - docker-volumes/grafana/config.monitoring
    restart: always
